{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","activePage","noOfEx","ExSeconds","url","audio","Audio","setState","play","self","setTimeout","pause","load","field","_this2","classes","_this$state","react_default","a","createElement","TextField_default","label","className","value","onChange","e","target","type","min","react_countdown_clock_default","seconds","color","alpha","size","onComplete","myCallback","container","noValidate","autoComplete","Button_default","onClick","disabled","button","GoToStopWatch","Component","withStyles","theme","display","flexWrap","margin","spacing","unit","input","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53450fb0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport ReactCountdownClock from  'react-countdown-clock';\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  button: {\n    margin: theme.spacing.unit,\n  },\n  input: {\n    display: 'none',\n  },\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      activePage: 1,\n      noOfEx: 0,\n      ExSeconds: 0\n    }\n    this.url = \"https://www.soundjay.com/clock/sounds/clock-ticking-1.mp3\";\n    this.audio = new Audio(this.url);\n  }\n  myCallback(){\n    this.setState({ activePage: 5 });\n    this.audio.play();\n    const self = this;\n    setTimeout(()=>{\n      if(self.state.noOfEx - 1 > 0){\n        self.setState({activePage:4,noOfEx:self.state.noOfEx-1});\n        self.audio.pause();\n        self.audio.load();\n      }\n    },2000)\n  }\n  GoToStopWatch() {\n    this.setState({ activePage: 4 })\n  }\n  render() {\n    const { classes } = this.props;\n    const { name, activePage, noOfEx, ExSeconds } = this.state;\n    let field;\n    switch (activePage) {\n      case 1:\n        field = (<TextField\n          label=\"Name\"\n          className=\"text\"\n          value={name}\n          onChange={(e) => this.setState({ name: e.target.value })}\n        />);\n        break;\n      case 2:\n        field = (<TextField\n          label=\"Number Of Excersice\"\n          className=\"text\"\n          value={noOfEx}\n          onChange={(e) => this.setState({ noOfEx: e.target.value })}\n        />);\n        break;\n      case 3:\n        field = (<TextField\n          label=\"Seconds\"\n          className=\"text\"\n          type=\"number\"\n          min={0}\n          value={ExSeconds}\n          onChange={(e) => this.setState({ ExSeconds: e.target.value })}\n        />);\n        break;\n      case 4: \n      field = (<div className=\"timmer\">\n        <ReactCountdownClock\n          seconds={ ExSeconds }\n          color = \"#1a237e\"\n          alpha = {0.9}\n          type=\"number\"\n          min={0}\n          size = {300}\n          onComplete = {() =>this.myCallback()} \n          />\n        </div>)\n      break;\n      case 5: \n      field = (<div className=\"timmer\">\n          Next REP\n        </div>)\n      break;\n      default:\n        field = (<div></div>)\n    }\n    return (\n      <div className=\"app-container\">\n        <form className={classes.container} noValidate autoComplete=\"off\">\n          {field}\n        </form>\n        <footer>\n          <Button color=\"secondary\"\n            onClick={() => this.setState({ activePage: activePage - 1 })}\n            disabled={activePage === 1}\n            className={classes.button}>\n            Previous\n          </Button>\n          <Button\n            color=\"primary\"\n            onClick={() => activePage === 3 ? this.GoToStopWatch() : this.setState({ activePage: activePage + 1 })}\n            disabled={activePage === 4}\n            className={classes.button}>\n            {activePage >= 3 ? \"Finished\" : \"Next\"}\n          </Button>\n        </footer>\n      </div>\n    );\n  }\n}\nconst myCallback = () =>{\n  console.log(\"oopopop\")\n}\nexport default withStyles(styles)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}